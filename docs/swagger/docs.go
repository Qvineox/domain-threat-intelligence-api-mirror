// Package swagger Code generated by swaggo/swag. DO NOT EDIT
package swagger

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {
            "name": "Yaroslav Lysak",
            "url": "https://t.me/Qvineox"
        },
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/auth/login": {
            "post": {
                "description": "Accepts login and password, return pair of auth tokens",
                "tags": [
                    "Auth"
                ],
                "summary": "Authorizes user by login and password",
                "parameters": [
                    {
                        "description": "user credentials",
                        "name": "username",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/routing.loginParams"
                        }
                    }
                ],
                "responses": {
                    "202": {
                        "description": "Accepted",
                        "schema": {
                            "$ref": "#/definitions/routing.tokenResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/error.APIError"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/error.APIError"
                        }
                    }
                }
            }
        },
        "/auth/logout": {
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Removes auth info from cookie and database by provided refresh token",
                "tags": [
                    "Auth"
                ],
                "summary": "Removes user auth tokens",
                "responses": {
                    "202": {
                        "description": "Accepted",
                        "schema": {
                            "$ref": "#/definitions/routing.tokenResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/error.APIError"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/error.APIError"
                        }
                    }
                }
            }
        },
        "/auth/password-strength": {
            "post": {
                "description": "Returns password strength",
                "tags": [
                    "Auth"
                ],
                "summary": "Get strength of a password",
                "parameters": [
                    {
                        "description": "password",
                        "name": "id",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/routing.passwordStrengthParams"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/routing.passwordStrengthResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/error.APIError"
                        }
                    }
                }
            }
        },
        "/auth/refresh": {
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Gets refresh token from Cookie and updates user auth tokens",
                "tags": [
                    "Auth"
                ],
                "summary": "Updates user auth tokens",
                "responses": {
                    "202": {
                        "description": "Accepted",
                        "schema": {
                            "$ref": "#/definitions/routing.tokenResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/error.APIError"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/error.APIError"
                        }
                    }
                }
            }
        },
        "/auth/registration": {
            "post": {
                "description": "Accepts user account data and register new platform user",
                "tags": [
                    "Auth"
                ],
                "summary": "Creates new user with defined data",
                "parameters": [
                    {
                        "description": "user credentials",
                        "name": "username",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/routing.loginParams"
                        }
                    }
                ],
                "responses": {
                    "202": {
                        "description": "Accepted"
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/error.APIError"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/error.APIError"
                        }
                    }
                }
            }
        },
        "/blacklists/domain": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Returns list of blacklisted domains by filter",
                "tags": [
                    "Blacklists"
                ],
                "summary": "Blacklisted domains by filter",
                "parameters": [
                    {
                        "type": "array",
                        "items": {
                            "type": "integer"
                        },
                        "collectionFormat": "multi",
                        "description": "Source type IDs",
                        "name": "source_id",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Import event ID",
                        "name": "import_event_id",
                        "in": "query"
                    },
                    {
                        "type": "boolean",
                        "description": "Is active",
                        "name": "is_active",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Created timestamp is after",
                        "name": "created_after",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Created timestamp is before",
                        "name": "created_before",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Substring to search",
                        "name": "search_string",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Query limit",
                        "name": "limit",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "Query offset",
                        "name": "offset",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/blacklistEntities.BlacklistedDomain"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/error.APIError"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/error.APIError"
                        }
                    }
                }
            },
            "put": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Accepts and saves list of blacklisted domains",
                "tags": [
                    "Blacklists"
                ],
                "summary": "Save blacklisted domains",
                "parameters": [
                    {
                        "description": "IPs to save",
                        "name": "hosts",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/routing.blacklistInsertParams"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/success.DatabaseResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/error.APIError"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/error.APIError"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Accepts and deletes single blacklisted domain",
                "tags": [
                    "Blacklists"
                ],
                "summary": "Delete blacklisted domain",
                "parameters": [
                    {
                        "description": "record UUID to delete",
                        "name": "id",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/routing.byUUIDParams"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/success.DatabaseResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/error.APIError"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/error.APIError"
                        }
                    }
                }
            }
        },
        "/blacklists/email": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Returns list of blacklisted emails by filter",
                "tags": [
                    "Blacklists"
                ],
                "summary": "Blacklisted emails by filter",
                "parameters": [
                    {
                        "type": "array",
                        "items": {
                            "type": "integer"
                        },
                        "collectionFormat": "multi",
                        "description": "Source type IDs",
                        "name": "source_id",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Import event ID",
                        "name": "import_event_id",
                        "in": "query"
                    },
                    {
                        "type": "boolean",
                        "description": "Is active",
                        "name": "is_active",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Created timestamp is after",
                        "name": "created_after",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Created timestamp is before",
                        "name": "created_before",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Substring to search",
                        "name": "search_string",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Query limit",
                        "name": "limit",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "Query offset",
                        "name": "offset",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/blacklistEntities.BlacklistedEmail"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/error.APIError"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/error.APIError"
                        }
                    }
                }
            },
            "put": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Accepts and saves list of blacklisted emails",
                "tags": [
                    "Blacklists"
                ],
                "summary": "Save blacklisted emails",
                "parameters": [
                    {
                        "description": "emails to save",
                        "name": "hosts",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/routing.blacklistInsertParams"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/success.DatabaseResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/error.APIError"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/error.APIError"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Accepts and deletes single blacklisted email",
                "tags": [
                    "Blacklists"
                ],
                "summary": "Delete blacklisted email",
                "parameters": [
                    {
                        "description": "record UUID to delete",
                        "name": "id",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/routing.byUUIDParams"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/success.DatabaseResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/error.APIError"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/error.APIError"
                        }
                    }
                }
            }
        },
        "/blacklists/export/csv": {
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Accepts filters and returns exported blacklisted hosts in CSV",
                "tags": [
                    "Blacklists",
                    "Export"
                ],
                "summary": "Exports blacklisted hosts into CSV",
                "parameters": [
                    {
                        "type": "array",
                        "items": {
                            "type": "integer"
                        },
                        "collectionFormat": "multi",
                        "description": "Source type IDs",
                        "name": "source_id[]",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Created timestamp is after",
                        "name": "created_after",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Created timestamp is before",
                        "name": "created_before",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Discovery timestamp is after",
                        "name": "discovered_after",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Discovery timestamp is before",
                        "name": "discovered_before",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "file"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/error.APIError"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/error.APIError"
                        }
                    }
                }
            }
        },
        "/blacklists/export/json": {
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Accepts filters and returns exported blacklisted hosts in JSON",
                "tags": [
                    "Blacklists",
                    "Export"
                ],
                "summary": "Exports blacklisted hosts into JSON",
                "parameters": [
                    {
                        "type": "array",
                        "items": {
                            "type": "integer"
                        },
                        "collectionFormat": "multi",
                        "description": "Source type IDs",
                        "name": "source_id[]",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Created timestamp is after",
                        "name": "created_after",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Created timestamp is before",
                        "name": "created_before",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Discovery timestamp is after",
                        "name": "discovered_after",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Discovery timestamp is before",
                        "name": "discovered_before",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "file"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/error.APIError"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/error.APIError"
                        }
                    }
                }
            }
        },
        "/blacklists/export/naumen": {
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Sends service call to Naumen Service Desk with hosts selected to block by filter",
                "tags": [
                    "Blacklists",
                    "Export"
                ],
                "summary": "Send hosts to Naumen Service Desk",
                "parameters": [
                    {
                        "type": "array",
                        "items": {
                            "type": "integer"
                        },
                        "collectionFormat": "multi",
                        "description": "Source type IDs",
                        "name": "source_id",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Import event ID",
                        "name": "import_event_id",
                        "in": "query"
                    },
                    {
                        "type": "boolean",
                        "description": "Is active",
                        "name": "is_active",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Created timestamp is after",
                        "name": "created_after",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Created timestamp is before",
                        "name": "created_before",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Substring to search",
                        "name": "search_string",
                        "in": "query"
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/serviceDeskEntities.ServiceDeskTicket"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/error.APIError"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/error.APIError"
                        }
                    }
                }
            }
        },
        "/blacklists/host": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Returns list of blacklisted hosts (all types) by filter",
                "tags": [
                    "Blacklists"
                ],
                "summary": "All hosts by filter",
                "parameters": [
                    {
                        "type": "array",
                        "items": {
                            "type": "integer"
                        },
                        "collectionFormat": "multi",
                        "description": "Source type IDs",
                        "name": "source_id[]",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Import event ID",
                        "name": "import_event_id",
                        "in": "query"
                    },
                    {
                        "type": "boolean",
                        "description": "Is active",
                        "name": "is_active",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Created timestamp is after",
                        "name": "created_after",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Created timestamp is before",
                        "name": "created_before",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "value to search",
                        "name": "search_string",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Query limit",
                        "name": "limit",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "Query offset",
                        "name": "offset",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/blacklistEntities.BlacklistedHost"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/error.APIError"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/error.APIError"
                        }
                    }
                }
            }
        },
        "/blacklists/import/csv": {
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Accepts and imports blacklisted hosts from CSV file",
                "tags": [
                    "Blacklists",
                    "Import"
                ],
                "summary": "Import blacklisted hosts from CSV file",
                "parameters": [
                    {
                        "type": "file",
                        "description": "file to import",
                        "name": "file_upload",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "discovery date",
                        "name": "discovered_at",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "other types extraction",
                        "name": "extract_all",
                        "in": "formData",
                        "required": true
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/blacklistEntities.BlacklistImportEvent"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/error.APIError"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/error.APIError"
                        }
                    }
                }
            }
        },
        "/blacklists/import/event": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Returns import events without data",
                "tags": [
                    "Blacklists",
                    "Import"
                ],
                "summary": "Get import events list",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Created timestamp is after",
                        "name": "created_after",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Created timestamp is before",
                        "name": "created_before",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Type to search",
                        "name": "type",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Query limit",
                        "name": "limit",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "Query offset",
                        "name": "offset",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/blacklistEntities.BlacklistImportEvent"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/error.APIError"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/error.APIError"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Accepts and deletes single blacklist import event",
                "tags": [
                    "Blacklists",
                    "Import"
                ],
                "summary": "Delete blacklist import event",
                "parameters": [
                    {
                        "description": "record ID to delete",
                        "name": "id",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/routing.byIDParams"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/success.DatabaseResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/error.APIError"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/error.APIError"
                        }
                    }
                }
            }
        },
        "/blacklists/import/event/{event_id}": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Returns import event data with all included blacklisted hosts",
                "tags": [
                    "Blacklists",
                    "Import"
                ],
                "summary": "Get import event",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Event ID",
                        "name": "event_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/blacklistEntities.BlacklistImportEvent"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/error.APIError"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/error.APIError"
                        }
                    }
                }
            }
        },
        "/blacklists/import/stix": {
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Accepts and imports blacklisted hosts from STIX 2.0 file",
                "consumes": [
                    "multipart/form-data"
                ],
                "tags": [
                    "Blacklists",
                    "Import"
                ],
                "summary": "Import blacklisted hosts from file (STIX 2.0)",
                "parameters": [
                    {
                        "type": "file",
                        "description": "file to import",
                        "name": "file_upload",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "discovery date",
                        "name": "discovered_at",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "other types extraction",
                        "name": "extract_all",
                        "in": "formData",
                        "required": true
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/blacklistEntities.BlacklistImportEvent"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/error.APIError"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/error.APIError"
                        }
                    }
                }
            }
        },
        "/blacklists/ip": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Returns list of blacklisted IPs by filter",
                "tags": [
                    "Blacklists"
                ],
                "summary": "Blacklisted IPs by filter",
                "parameters": [
                    {
                        "type": "array",
                        "items": {
                            "type": "integer"
                        },
                        "collectionFormat": "multi",
                        "description": "Source type IDs",
                        "name": "source_id",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Import event ID",
                        "name": "import_event_id",
                        "in": "query"
                    },
                    {
                        "type": "boolean",
                        "description": "Is active",
                        "name": "is_active",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Created timestamp is after",
                        "name": "created_after",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Created timestamp is before",
                        "name": "created_before",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "CIDR to search (must include IP/MASK)",
                        "name": "search_string",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Query limit",
                        "name": "limit",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "Query offset",
                        "name": "offset",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/blacklistEntities.BlacklistedIP"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/error.APIError"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/error.APIError"
                        }
                    }
                }
            },
            "put": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Accepts and saves list of blacklisted IPs",
                "tags": [
                    "Blacklists"
                ],
                "summary": "Save blacklisted ips",
                "parameters": [
                    {
                        "description": "IPs to save",
                        "name": "hosts",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/routing.blacklistInsertParams"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/success.DatabaseResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/error.APIError"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/error.APIError"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Accepts and deletes single blacklisted IP",
                "tags": [
                    "Blacklists"
                ],
                "summary": "Delete blacklisted IP",
                "parameters": [
                    {
                        "description": "record UUID to delete",
                        "name": "id",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/routing.byUUIDParams"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/success.DatabaseResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/error.APIError"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/error.APIError"
                        }
                    }
                }
            }
        },
        "/blacklists/sources": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Returns all available blacklist data sources",
                "tags": [
                    "Blacklists"
                ],
                "summary": "Get blacklist sources",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/blacklistEntities.BlacklistSource"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/error.APIError"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/error.APIError"
                        }
                    }
                }
            }
        },
        "/blacklists/stats": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Returns data containing overall amount of blacklisted entities",
                "tags": [
                    "Blacklists"
                ],
                "summary": "Returns amount of blacklisted entities",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/routing.BlacklistedStatistics"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/error.APIError"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/error.APIError"
                        }
                    }
                }
            }
        },
        "/blacklists/url": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Returns list of blacklisted URLs by filter",
                "tags": [
                    "Blacklists"
                ],
                "summary": "Blacklisted URLs by filter",
                "parameters": [
                    {
                        "type": "array",
                        "items": {
                            "type": "integer"
                        },
                        "collectionFormat": "multi",
                        "description": "Source type IDs",
                        "name": "source_id",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Import event ID",
                        "name": "import_event_id",
                        "in": "query"
                    },
                    {
                        "type": "boolean",
                        "description": "Is active",
                        "name": "is_active",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Created timestamp is after",
                        "name": "created_after",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Created timestamp is before",
                        "name": "created_before",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Substring to search",
                        "name": "search_string",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Query limit",
                        "name": "limit",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "Query offset",
                        "name": "offset",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/blacklistEntities.BlacklistedURL"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/error.APIError"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/error.APIError"
                        }
                    }
                }
            },
            "put": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Accepts and saves list of blacklisted URLs",
                "tags": [
                    "Blacklists"
                ],
                "summary": "Save blacklisted URLs",
                "parameters": [
                    {
                        "description": "URLs to save",
                        "name": "hosts",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/routing.blacklistInsertParams"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/success.DatabaseResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/error.APIError"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/error.APIError"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Accepts and deletes single blacklisted URL",
                "tags": [
                    "Blacklists"
                ],
                "summary": "Delete blacklisted URL",
                "parameters": [
                    {
                        "description": "record UUID to delete",
                        "name": "id",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/routing.byUUIDParams"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/success.DatabaseResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/error.APIError"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/error.APIError"
                        }
                    }
                }
            }
        },
        "/system/dynamic": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    },
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Gets info about current dynamic application config",
                "tags": [
                    "Configuration"
                ],
                "summary": "View application dynamic config",
                "responses": {
                    "200": {
                        "description": "OK"
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/error.APIError"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/error.APIError"
                        }
                    }
                }
            }
        },
        "/system/dynamic/naumen": {
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Updates dynamic Naumen Service Desk configuration",
                "tags": [
                    "Configuration"
                ],
                "summary": "Update dynamic Naumen Service Desk configuration",
                "parameters": [
                    {
                        "description": "dynamic naumen configuration",
                        "name": "naumenConfig",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/routing.naumenConfigUpdateParams"
                        }
                    }
                ],
                "responses": {
                    "202": {
                        "description": "Accepted"
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/error.APIError"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/error.APIError"
                        }
                    }
                }
            }
        },
        "/system/dynamic/naumen/blacklists": {
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Updates dynamic Naumen Service Desk service configuration",
                "tags": [
                    "Configuration"
                ],
                "summary": "Update dynamic Naumen Service Desk service configuration",
                "parameters": [
                    {
                        "description": "dynamic naumen service configuration",
                        "name": "naumenConfig",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/routing.naumenBlacklistServiceConfigUpdateParams"
                        }
                    }
                ],
                "responses": {
                    "202": {
                        "description": "Accepted"
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/error.APIError"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/error.APIError"
                        }
                    }
                }
            }
        },
        "/system/dynamic/reset": {
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Resets all dynamic configuration variables",
                "tags": [
                    "Configuration"
                ],
                "summary": "Return all dynamic configuration variables to default",
                "responses": {
                    "202": {
                        "description": "Accepted"
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/error.APIError"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/error.APIError"
                        }
                    }
                }
            }
        },
        "/system/dynamic/smtp": {
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Updates dynamic SMTP configuration",
                "tags": [
                    "Configuration"
                ],
                "summary": "Update dynamic SMTP configuration",
                "parameters": [
                    {
                        "description": "dynamic SMTP configuration",
                        "name": "smtpConfig",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/routing.smtpConfigUpdateParams"
                        }
                    }
                ],
                "responses": {
                    "202": {
                        "description": "Accepted"
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/error.APIError"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/error.APIError"
                        }
                    }
                }
            }
        },
        "/users/me": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Returns current session user in JWT token",
                "tags": [
                    "Users"
                ],
                "summary": "Get current session user",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/userEntities.PlatformUser"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/error.APIError"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/error.APIError"
                        }
                    }
                }
            }
        },
        "/users/password/change": {
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Sets new password for user. Closes session",
                "tags": [
                    "Users"
                ],
                "summary": "Changes password for user",
                "parameters": [
                    {
                        "description": "new password",
                        "name": "id",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/routing.changePasswordParams"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK"
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/error.APIError"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/error.APIError"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/error.APIError"
                        }
                    }
                }
            }
        },
        "/users/password/reset": {
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Resets password for user",
                "tags": [
                    "Users"
                ],
                "summary": "Reset password",
                "parameters": [
                    {
                        "description": "user to reset",
                        "name": "id",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/routing.byIDParams"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK"
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/error.APIError"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/error.APIError"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/error.APIError"
                        }
                    }
                }
            }
        },
        "/users/permissions": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Returns all permissions",
                "tags": [
                    "Users"
                ],
                "summary": "Get all available permissions",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/userEntities.PlatformUserPermission"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/error.APIError"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/error.APIError"
                        }
                    }
                }
            }
        },
        "/users/permissions/presets": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Returns all permission presets",
                "tags": [
                    "Users"
                ],
                "summary": "Get all permission presets",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/userEntities.PlatformUserRolesPreset"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/error.APIError"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/error.APIError"
                        }
                    }
                }
            }
        },
        "/users/user": {
            "put": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Accepts and creates user account",
                "tags": [
                    "Users"
                ],
                "summary": "Create user account",
                "parameters": [
                    {
                        "description": "user data",
                        "name": "user",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/routing.userCreateParams"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/success.DatabaseResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/error.APIError"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/error.APIError"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Accepts and deletes single user account",
                "tags": [
                    "Users"
                ],
                "summary": "Delete user account",
                "parameters": [
                    {
                        "description": "record ID to delete",
                        "name": "id",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/routing.byIDParams"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/success.DatabaseResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/error.APIError"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/error.APIError"
                        }
                    }
                }
            },
            "patch": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Accepts and updates single user account",
                "tags": [
                    "Users"
                ],
                "summary": "Update user account",
                "parameters": [
                    {
                        "description": "user update",
                        "name": "user",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/routing.userUpdateParams"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/success.DatabaseResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/error.APIError"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/error.APIError"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/error.APIError"
                        }
                    }
                }
            }
        },
        "/users/user/{user_id}": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Returns single user account",
                "tags": [
                    "Users"
                ],
                "summary": "Get single user account",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "User ID",
                        "name": "user_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/userEntities.PlatformUser"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/error.APIError"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/error.APIError"
                        }
                    }
                }
            }
        },
        "/users/users": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Returns all user accounts",
                "tags": [
                    "Users"
                ],
                "summary": "Get all user accounts",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/userEntities.PlatformUser"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/error.APIError"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/error.APIError"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "blacklistEntities.BlacklistImportEvent": {
            "type": "object",
            "properties": {
                "CreatedAt": {
                    "type": "string"
                },
                "CreatedBy": {
                    "description": "CreatedBy defines import event creator identity",
                    "allOf": [
                        {
                            "$ref": "#/definitions/userEntities.PlatformUser"
                        }
                    ]
                },
                "CreatedByID": {
                    "type": "integer"
                },
                "DeletedAt": {
                    "$ref": "#/definitions/gorm.DeletedAt"
                },
                "ID": {
                    "type": "integer"
                },
                "IsComplete": {
                    "type": "boolean"
                },
                "Summary": {
                    "$ref": "#/definitions/datatypes.JSONType-blacklistEntities_BlacklistImportEventSummary"
                },
                "Type": {
                    "type": "string"
                }
            }
        },
        "blacklistEntities.BlacklistSource": {
            "type": "object",
            "properties": {
                "CreatedAt": {
                    "type": "string"
                },
                "DeletedAt": {
                    "$ref": "#/definitions/gorm.DeletedAt"
                },
                "Description": {
                    "type": "string"
                },
                "ID": {
                    "type": "integer"
                },
                "Name": {
                    "type": "string"
                },
                "UpdatedAt": {
                    "type": "string"
                }
            }
        },
        "blacklistEntities.BlacklistedDomain": {
            "type": "object",
            "properties": {
                "CreatedAt": {
                    "type": "string"
                },
                "DeletedAt": {
                    "$ref": "#/definitions/gorm.DeletedAt"
                },
                "Description": {
                    "type": "string"
                },
                "DiscoveredAt": {
                    "description": "DiscoveredAt sets date of discovery, provided by source or inserted automatically on create",
                    "type": "string"
                },
                "ImportEvent": {
                    "description": "ImportEvent describes import session from where blacklisted host was added",
                    "allOf": [
                        {
                            "$ref": "#/definitions/blacklistEntities.BlacklistImportEvent"
                        }
                    ]
                },
                "ImportEventID": {
                    "type": "integer"
                },
                "Source": {
                    "description": "Defines source from where blacklisted host was added",
                    "allOf": [
                        {
                            "$ref": "#/definitions/blacklistEntities.BlacklistSource"
                        }
                    ]
                },
                "SourceID": {
                    "type": "integer"
                },
                "URN": {
                    "type": "string"
                },
                "UUID": {
                    "type": "string"
                },
                "UpdatedAt": {
                    "type": "string"
                }
            }
        },
        "blacklistEntities.BlacklistedEmail": {
            "type": "object",
            "properties": {
                "CreatedAt": {
                    "type": "string"
                },
                "DeletedAt": {
                    "$ref": "#/definitions/gorm.DeletedAt"
                },
                "Description": {
                    "type": "string"
                },
                "DiscoveredAt": {
                    "description": "DiscoveredAt sets date of discovery, provided by source or inserted automatically on create",
                    "type": "string"
                },
                "Email": {
                    "type": "string"
                },
                "ImportEvent": {
                    "description": "ImportEvent describes import session from where blacklisted host was added",
                    "allOf": [
                        {
                            "$ref": "#/definitions/blacklistEntities.BlacklistImportEvent"
                        }
                    ]
                },
                "ImportEventID": {
                    "type": "integer"
                },
                "Source": {
                    "description": "Defines source from where blacklisted host was added",
                    "allOf": [
                        {
                            "$ref": "#/definitions/blacklistEntities.BlacklistSource"
                        }
                    ]
                },
                "SourceID": {
                    "type": "integer"
                },
                "UUID": {
                    "type": "string"
                },
                "UpdatedAt": {
                    "type": "string"
                }
            }
        },
        "blacklistEntities.BlacklistedHost": {
            "type": "object",
            "properties": {
                "CreatedAt": {
                    "type": "string"
                },
                "DeletedAt": {
                    "$ref": "#/definitions/gorm.DeletedAt"
                },
                "Description": {
                    "type": "string"
                },
                "DiscoveredAt": {
                    "description": "DiscoveredAt sets date of discovery, provided by source or inserted automatically on create",
                    "type": "string"
                },
                "Host": {
                    "type": "string"
                },
                "ImportEvent": {
                    "description": "ImportEvent describes import session from where blacklisted host was added",
                    "allOf": [
                        {
                            "$ref": "#/definitions/blacklistEntities.BlacklistImportEvent"
                        }
                    ]
                },
                "ImportEventID": {
                    "type": "integer"
                },
                "Source": {
                    "description": "Source defines source from where blacklisted host was added",
                    "allOf": [
                        {
                            "$ref": "#/definitions/blacklistEntities.BlacklistSource"
                        }
                    ]
                },
                "SourceID": {
                    "type": "integer"
                },
                "Status": {
                    "$ref": "#/definitions/blacklistEntities.HostStatus"
                },
                "Type": {
                    "description": "domain, url or IP",
                    "type": "string"
                },
                "UUID": {
                    "type": "string"
                },
                "UpdatedAt": {
                    "type": "string"
                }
            }
        },
        "blacklistEntities.BlacklistedIP": {
            "type": "object",
            "properties": {
                "CreatedAt": {
                    "type": "string"
                },
                "DeletedAt": {
                    "$ref": "#/definitions/gorm.DeletedAt"
                },
                "Description": {
                    "type": "string"
                },
                "DiscoveredAt": {
                    "description": "DiscoveredAt sets date of discovery, provided by source or inserted automatically on create",
                    "type": "string"
                },
                "IPAddress": {
                    "$ref": "#/definitions/pgtype.Inet"
                },
                "ImportEvent": {
                    "description": "ImportEvent describes import session from where blacklisted host was added",
                    "allOf": [
                        {
                            "$ref": "#/definitions/blacklistEntities.BlacklistImportEvent"
                        }
                    ]
                },
                "ImportEventID": {
                    "type": "integer"
                },
                "Source": {
                    "description": "Defines source from where blacklisted host was added",
                    "allOf": [
                        {
                            "$ref": "#/definitions/blacklistEntities.BlacklistSource"
                        }
                    ]
                },
                "SourceID": {
                    "type": "integer"
                },
                "UUID": {
                    "type": "string"
                },
                "UpdatedAt": {
                    "type": "string"
                }
            }
        },
        "blacklistEntities.BlacklistedURL": {
            "type": "object",
            "properties": {
                "CreatedAt": {
                    "type": "string"
                },
                "DeletedAt": {
                    "$ref": "#/definitions/gorm.DeletedAt"
                },
                "Description": {
                    "type": "string"
                },
                "DiscoveredAt": {
                    "description": "DiscoveredAt sets date of discovery, provided by source or inserted automatically on create",
                    "type": "string"
                },
                "ImportEvent": {
                    "description": "ImportEvent describes import session from where blacklisted host was added",
                    "allOf": [
                        {
                            "$ref": "#/definitions/blacklistEntities.BlacklistImportEvent"
                        }
                    ]
                },
                "ImportEventID": {
                    "type": "integer"
                },
                "MD5": {
                    "type": "string"
                },
                "Source": {
                    "description": "Defines source from where blacklisted host was added",
                    "allOf": [
                        {
                            "$ref": "#/definitions/blacklistEntities.BlacklistSource"
                        }
                    ]
                },
                "SourceID": {
                    "type": "integer"
                },
                "URL": {
                    "type": "string"
                },
                "UUID": {
                    "type": "string"
                },
                "UpdatedAt": {
                    "type": "string"
                }
            }
        },
        "blacklistEntities.HostStatus": {
            "type": "string",
            "enum": [
                "new"
            ],
            "x-enum-varnames": [
                "HostStatusNew"
            ]
        },
        "datatypes.JSONType-blacklistEntities_BlacklistImportEventSummary": {
            "type": "object"
        },
        "error.APIError": {
            "type": "object",
            "properties": {
                "ErrorCode": {
                    "$ref": "#/definitions/error.CodeError"
                },
                "ErrorMessage": {
                    "type": "string"
                },
                "ErrorModule": {
                    "type": "string"
                },
                "StatusCode": {
                    "type": "integer"
                }
            }
        },
        "error.CodeError": {
            "type": "integer",
            "enum": [
                1,
                2,
                3,
                4,
                5,
                6,
                7,
                8,
                9,
                10,
                11,
                12,
                13,
                14
            ],
            "x-enum-varnames": [
                "EncodingErrorCode",
                "DecodingErrorCode",
                "IncorrectParamsErrorCode",
                "InsufficientParamsErrorCode",
                "DatabaseErrorCode",
                "DatabaseEntityNotFoundCode",
                "FileDecodingErrorCode",
                "FileReadingErrorCode",
                "FileExtensionNotSupportedErrorCode",
                "NotImplementedErrorCode",
                "FileProcessingErrorCode",
                "InternalUnidentifiedErrorCode",
                "AuthFailedErrorCode",
                "AuthPermissionInsufficientErrorCode"
            ]
        },
        "gorm.DeletedAt": {
            "type": "object",
            "properties": {
                "time": {
                    "type": "string"
                },
                "valid": {
                    "description": "Valid is true if Time is not NULL",
                    "type": "boolean"
                }
            }
        },
        "net.IPNet": {
            "type": "object",
            "properties": {
                "ip": {
                    "description": "network number",
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                },
                "mask": {
                    "description": "network mask",
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                }
            }
        },
        "pgtype.Inet": {
            "type": "object",
            "properties": {
                "ipnet": {
                    "$ref": "#/definitions/net.IPNet"
                },
                "status": {
                    "$ref": "#/definitions/pgtype.Status"
                }
            }
        },
        "pgtype.Status": {
            "type": "integer",
            "enum": [
                0,
                1,
                2
            ],
            "x-enum-varnames": [
                "Undefined",
                "Null",
                "Present"
            ]
        },
        "routing.BlacklistedStatistics": {
            "type": "object",
            "properties": {
                "CreatedByDate": {
                    "$ref": "#/definitions/routing.HostsByDate"
                },
                "DiscoveredByDate": {
                    "$ref": "#/definitions/routing.HostsByDate"
                },
                "LastEval": {
                    "type": "string"
                },
                "TotalDomains": {
                    "type": "integer"
                },
                "TotalEmails": {
                    "type": "integer"
                },
                "TotalIPs": {
                    "type": "integer"
                },
                "TotalURLs": {
                    "type": "integer"
                }
            }
        },
        "routing.HostsByDate": {
            "type": "object",
            "properties": {
                "Dates": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "Domains": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                },
                "Emails": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                },
                "IPs": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                },
                "URLs": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                }
            }
        },
        "routing.blacklistInsertParams": {
            "type": "object",
            "required": [
                "hosts"
            ],
            "properties": {
                "hosts": {
                    "description": "issue: https://github.com/gin-gonic/gin/issues/3436",
                    "type": "array",
                    "minItems": 1,
                    "items": {
                        "type": "object",
                        "required": [
                            "host",
                            "source_id"
                        ],
                        "properties": {
                            "description": {
                                "type": "string"
                            },
                            "host": {
                                "type": "string"
                            },
                            "source_id": {
                                "type": "integer"
                            }
                        }
                    }
                }
            }
        },
        "routing.byIDParams": {
            "type": "object",
            "required": [
                "ID"
            ],
            "properties": {
                "ID": {
                    "type": "integer"
                }
            }
        },
        "routing.byUUIDParams": {
            "type": "object",
            "required": [
                "UUID"
            ],
            "properties": {
                "UUID": {
                    "type": "string"
                }
            }
        },
        "routing.changePasswordParams": {
            "type": "object",
            "required": [
                "ID",
                "NewPassword",
                "OldPassword"
            ],
            "properties": {
                "ID": {
                    "type": "integer"
                },
                "NewPassword": {
                    "type": "string"
                },
                "OldPassword": {
                    "type": "string"
                }
            }
        },
        "routing.loginParams": {
            "type": "object",
            "required": [
                "password",
                "username"
            ],
            "properties": {
                "password": {
                    "type": "string"
                },
                "username": {
                    "type": "string"
                }
            }
        },
        "routing.naumenBlacklistServiceConfigUpdateParams": {
            "type": "object",
            "required": [
                "AgreementID",
                "CallType",
                "HostTypes",
                "SLM"
            ],
            "properties": {
                "AgreementID": {
                    "type": "integer"
                },
                "CallType": {
                    "type": "string"
                },
                "HostTypes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "SLM": {
                    "type": "integer"
                }
            }
        },
        "routing.naumenConfigUpdateParams": {
            "type": "object",
            "required": [
                "ClientGroupID",
                "ClientID",
                "ClientKey",
                "URL"
            ],
            "properties": {
                "ClientGroupID": {
                    "type": "integer"
                },
                "ClientID": {
                    "type": "integer"
                },
                "ClientKey": {
                    "type": "string"
                },
                "Enabled": {
                    "type": "boolean"
                },
                "URL": {
                    "type": "string"
                }
            }
        },
        "routing.passwordStrengthParams": {
            "type": "object",
            "required": [
                "Password"
            ],
            "properties": {
                "Password": {
                    "type": "string"
                }
            }
        },
        "routing.passwordStrengthResponse": {
            "type": "object",
            "properties": {
                "CrackTime": {
                    "type": "number"
                },
                "Entropy": {
                    "type": "number"
                },
                "Level": {
                    "type": "integer"
                }
            }
        },
        "routing.smtpConfigUpdateParams": {
            "type": "object",
            "required": [
                "From",
                "Host",
                "Port",
                "User"
            ],
            "properties": {
                "Enabled": {
                    "type": "boolean"
                },
                "From": {
                    "type": "string"
                },
                "Host": {
                    "type": "string"
                },
                "Password": {
                    "type": "string"
                },
                "Port": {
                    "type": "integer"
                },
                "SSL": {
                    "type": "boolean"
                },
                "User": {
                    "type": "string"
                }
            }
        },
        "routing.tokenResponse": {
            "type": "object",
            "properties": {
                "AccessToken": {
                    "type": "string"
                }
            }
        },
        "routing.userCreateParams": {
            "type": "object",
            "required": [
                "fullName",
                "login",
                "password",
                "permissionIDs"
            ],
            "properties": {
                "email": {
                    "type": "string"
                },
                "fullName": {
                    "type": "string"
                },
                "isActive": {
                    "type": "boolean"
                },
                "login": {
                    "type": "string"
                },
                "password": {
                    "type": "string"
                },
                "permissionIDs": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                }
            }
        },
        "routing.userUpdateParams": {
            "type": "object",
            "required": [
                "fullName",
                "id",
                "login",
                "permissionIDs"
            ],
            "properties": {
                "email": {
                    "type": "string"
                },
                "fullName": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "isActive": {
                    "type": "boolean"
                },
                "login": {
                    "type": "string"
                },
                "permissionIDs": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                }
            }
        },
        "serviceDeskEntities.ServiceDeskTicket": {
            "type": "object",
            "properties": {
                "CreatedAt": {
                    "type": "string"
                },
                "Data": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                },
                "DeletedAt": {
                    "$ref": "#/definitions/gorm.DeletedAt"
                },
                "ID": {
                    "type": "integer"
                },
                "System": {
                    "type": "string"
                },
                "TicketID": {
                    "description": "TicketID is issued by service desk",
                    "type": "string"
                },
                "UpdatedAt": {
                    "type": "string"
                }
            }
        },
        "success.DatabaseResponse": {
            "type": "object",
            "properties": {
                "RowsAffected": {
                    "type": "integer"
                },
                "StatusCode": {
                    "type": "integer"
                },
                "Warnings": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "userEntities.PlatformUser": {
            "type": "object",
            "properties": {
                "CreatedAt": {
                    "type": "string"
                },
                "DeletedAt": {
                    "$ref": "#/definitions/gorm.DeletedAt"
                },
                "Email": {
                    "type": "string"
                },
                "FullName": {
                    "type": "string"
                },
                "ID": {
                    "type": "integer"
                },
                "IsActive": {
                    "type": "boolean"
                },
                "Login": {
                    "type": "string"
                },
                "Permissions": {
                    "description": "Defines which roles user has",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/userEntities.PlatformUserPermission"
                    }
                },
                "UpdatedAt": {
                    "type": "string"
                }
            }
        },
        "userEntities.PlatformUserPermission": {
            "type": "object",
            "properties": {
                "CreatedAt": {
                    "type": "string"
                },
                "DeletedAt": {
                    "$ref": "#/definitions/gorm.DeletedAt"
                },
                "Description": {
                    "type": "string"
                },
                "ID": {
                    "type": "integer"
                },
                "IsActive": {
                    "type": "boolean"
                },
                "Name": {
                    "type": "string"
                },
                "UpdatedAt": {
                    "type": "string"
                }
            }
        },
        "userEntities.PlatformUserRolesPreset": {
            "type": "object",
            "properties": {
                "Description": {
                    "type": "string"
                },
                "Name": {
                    "type": "string"
                },
                "PermissionIDs": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                }
            }
        }
    },
    "securityDefinitions": {
        "ApiKeyAuth": {
            "type": "apiKey",
            "name": "x-api-Key",
            "in": "header"
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "0.0.3",
	Host:             "",
	BasePath:         "",
	Schemes:          []string{},
	Title:            "Domain Threat Intelligence API",
	Description:      "API provided by DTI project",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
